#!/bin/bash
# Generate iterator methods for all node types from template

set -euo pipefail

# Use GOFILE environment variable set by go generate
template_file="${GOFILE}"

# Check if template exists
if [[ ! -f "$template_file" ]]; then
    echo "Error: Template file '$template_file' not found" >&2
    echo "GOFILE=${GOFILE:-<not set>}" >&2
    exit 1
fi

echo "Generating iterator methods from template..."

# Node types to generate
readonly NODE_TYPES=("bartNode" "fastNode" "liteNode")

# for goimports, see below
generated_files=()

for nodeType in "${NODE_TYPES[@]}"; do
    output_file="${nodeType/Node/}${template_file/_tmpl/_gen}"
    
    # Remove go:generate directives and build constraint, add generated header, substitute node type
    sed -e '/^\/\/go:generate /d' \
        -e 's|^//go:build ignore$|// Code generated by go generate; DO NOT EDIT.|' \
        -e "s/_NODE_TYPE/${nodeType}/g" \
        $template_file > "${output_file}"
    
    if [[ -f "${output_file}" ]]; then
        echo "✓ Generated ${output_file}"
				generated_files+=("$output_file")
    else
        echo "✗ Failed to generate ${output_file}" >&2
        exit 1
    fi
done

# Run goimports on generated files
if command -v goimports >/dev/null 2>&1; then
    echo "Running goimports on generated files..."
    goimports -w "${generated_files[@]}"
    echo "✓ goimports completed"
else
    echo "⚠ goimports not found, skipping formatting"
fi

echo "Template generation complete!"
